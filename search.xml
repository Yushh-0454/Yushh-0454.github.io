<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>eightsort2</title>
    <url>/2019/11/25/eightsort2/</url>
    <content><![CDATA[<p>#####<font color="#BD00BD">  <strong>冒泡排序</strong>   </font></p>
<p><img src="/2019/11/25/eightsort2/eightsort2%5C%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序"></p>
<p>基本思想：冒泡排序属于比较简单的排序，以非递减为例，依次遍历数组，发现a[i]&gt;a[i+1}的情况，swap(a[i],a[i+1])，直到没有逆序的数据，完成排序。</p>
<p>可以用两个for循环嵌套实现，外层控制遍历次数，内层用来实现交换，也可以用一个boolean类型变量来控制是否有交换发生，如果没有交换，表明已经正序，可以直接输出。</p>
<p>复杂度分析：很明显，冒泡排序最好情况是数组已经有序的情况，此时只需要遍历一次数据，没有交换发生，结束排序，时间复杂度为O(n)，那最坏情况下的冒泡就是逆序，此时你需要遍历n-1次数据，（数据为 3  2  1，一次遍历为2 1 3 ，二次遍历 1 2 3 结束  ），此时的时间复杂度为O(n^2)，平均情况下也为O(n^2) 需要注意的是平均情况并不是与最坏情况下的时间复杂度相等，平均的时间复杂度=sum(Pi*f(n));Pi为每种情况出现的概率，计算起来有些困难，在这里直接用前辈的结果，空间复杂度：只需要一个temp临时变量来交换数据，所以O(1)。</p>
<p>Ps：冒泡排序在数组基本有序，只有零星逆序的情况下效率极高</p>
<ul>
<li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>{
 <span class="keyword">boolean</span> bol = <span class="keyword">true</span>;
     <span class="keyword">while</span> (bol) {
         bol = <span class="keyword">false</span>;
         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; ++i) {
             <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) {
                 <span class="keyword">int</span> temp = a[i];
                 a[i] = a[i + <span class="number">1</span>];
                 a[i + <span class="number">1</span>] = temp;
                 bol = <span class="keyword">true</span>;
             }
         }
     }
 }
 &lt;!--￼<span class="number">0</span>--&gt;
</code></pre>
</li>
</ul>
<p>#####<font color="#BD00BD">  <strong>插入排序</strong>   </font></p>
<p><img src="/2019/11/25/eightsort2/eightsort2%5C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p>
<p>基本思想：从第一个数开始，认定数组的前i个数有序，依次遍历数组，把后面的数据插入到合适的位置，使数组继续保持有序，用两个for循环实现，外层i用来控制数组的数据量，内层用来找到a[i]需要插入的位置，如果temp大于a[j]则把a[j]向后移动。</p>
<p>时间复杂度：最好情况是数组有序，依次把数据放到前一个数的后面O(n)，最坏情况是数组逆序，遍历n次数组，每次都需要把n个数据向后移动O(n)，平均情况O(n)。</p>
<p>空间复杂度：需要一个临时变量temp来存储即将插入的数据，所以O(1)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a[i];</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; a[j]) &#123;</span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#####<font color="#BD00BD">  <strong>快速排序</strong>   </font></p>
<p><img src="/2019/11/25/eightsort2/eightsort2%5C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序"></p>
<p>基本思想：选择数组任一数据作为baseNum，依次从前向后 找到第一个比baseNum大的元素，然后与baseNum交换。从后向前找到第一个比baseNum小的元素，然后与baseNum交换，直到遍历一次，baseNum恰好放到正确的位置然后在分别对baseNum左和baseNum右两部分进行快速排序，外层是while循环，条件start&lt;end  为一次遍历循环体两个while，一个从左到右找到第一个比k大的元素交换，条件是（start&lt;end&amp;&amp;a[start]&lt;=base）另一个从右到左找到第一个比baseNum小的元素交换一次遍历之后把数组划分成两部分，然后一次递归；</p>
<p>时间复杂度：在最好和平均情况下，数据从中间划分成两部分，一个大小为n的数组需要划分Log2n次，即递归log2n次，一次对n级别个数据进行操作，所以时间复杂度为O（n<em>log2n），在最坏的情况下，每次都选到数组中的最大或者最小的元素，每次划分成n-1和1两部分，这样就需要递归n-1次，一次对n级别个数据进行操作，所以最坏的时间复杂度为O(n</em>2)</p>
<p>空间复杂度：平均需要递归log2n次，所以平均空间复杂度为O(log2n)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> baseNum = arr[left];</span><br><span class="line">    <span class="keyword">int</span> start = left;</span><br><span class="line">    <span class="keyword">int</span> end = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start != end) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[end] &gt;= baseNum &amp;&amp; start &lt; end) &#123;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (arr[start] &lt;= baseNum &amp;&amp; start &lt; end) &#123;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp = arr[start];</span><br><span class="line">        arr[start] = arr[end];</span><br><span class="line">        arr[end] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr[left] = arr[start];</span><br><span class="line">    arr[start] = baseNum;</span><br><span class="line"></span><br><span class="line">    quickSort(arr, left, start - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr, end + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#####<font color="#BD00BD">  <strong>归并排序</strong>   </font></p>
<p><img src="/2019/11/25/eightsort2/eightsort2%5C%E5%B9%B6%E5%BD%92%E6%8E%92%E5%BA%8F.gif" alt="并归排序"></p>
<p>基本思想：将元素无限拆分，直到无可拆分为止，再将拆分的元素两两按序合并</p>
<p>时间复杂度：时间复杂度是O(N)，而二叉树的深度是log2N，所以总的时间复杂度是O(N*lgN)</p>
<p>空间复杂度：归并的空间复杂度就是那个临时的数组和递归时压入栈的数据占用的空间：n + logn；所以空间复杂度为: O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">    sort(array, temp, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Title</span>: sort</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 使用归并排序，对array的left~right进行排序</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>: array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>: temp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>: left</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>: right</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span>[] temp, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义待排序中间元素</span></span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; mid) &#123;</span><br><span class="line">        <span class="comment">// 递归排序中间元素及左边的元素</span></span><br><span class="line">        sort(array, temp, left, mid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mid + <span class="number">1</span> &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 递归排序中间元素右边的元素</span></span><br><span class="line">        sort(array, temp, mid + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 合并左右两边的元素</span></span><br><span class="line">    merge(array, temp, left, mid, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: merge</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 借助temp数组，合并mid元素左右的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: temp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: left</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: mid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: right</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span>[] temp, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用于遍历左边元素</span></span><br><span class="line">    <span class="keyword">int</span> i = left;</span><br><span class="line">    <span class="comment">// 用于遍历右边元素</span></span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 临时变量</span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="comment">// 将左右两边最小的元素添加到temp数组中</span></span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt;= array[j]) &#123;</span><br><span class="line">            temp[t++] = array[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[t++] = array[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        <span class="comment">// 将左边剩余元素添加到temp数组中</span></span><br><span class="line">        temp[t++] = array[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        <span class="comment">// 将右边剩余元素添加到temp数组中</span></span><br><span class="line">        temp[t++] = array[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 将temp中的元素全部拷贝到原数组中</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        array[left++] = temp[t++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#####<font color="#BD00BD">  <strong>基数排序</strong>   </font></p>
<p><img src="/2019/11/25/eightsort2/eightsort2%5C%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="基数排序"></p>
<p>待整理</p>
<p>#####<font color="#BD00BD">  <strong>希尔排序(shell)</strong>   </font></p>
<p><img src="/2019/11/25/eightsort2/eightsort2%5C%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="希尔排序"></p>
<p>基本思想：希尔排序选取一个增量h，也就是把整个数组分成h份，对每一份进行排序。然后减少增量h，重复上述过程。一般我们选取的递增序列为：3*h+1   即1,4,13,40,…..</p>
<p>实现：用一个while语句求出对应数组我们所需要的最大h,然后在用一个外层while循环控制h，每循环一次h=h/3;直至h自减至1;内层是直接插入排序算法，两个for循环嵌套，外层for循环用来控制i  - a.length的自增，内层for循环用来找到i需要插入的位置。</p>
<p>时间复杂度：希尔排序最好情况是数组正序，此时外层for循环执行一次+最外层while循环&lt;n次；内层for循环不执行，O(n)，最坏情况是数组逆序，外层for循环+while&lt;n次，内层for每次都需要把n个数据向后移动一位O(n^2)，平均情况：  O(n^1.3)</p>
<p>空间复杂度：需要一个temp用来临时交换数据，一个h来保存增量O(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = a.length;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; len / <span class="number">3</span>)</span><br><span class="line">        h = h * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; len; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h; j = j - h) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[j] &lt; a[j - h]) &#123;</span><br><span class="line">                        <span class="keyword">int</span> temp = a[j];</span><br><span class="line">                        a[j] = a[j - h];</span><br><span class="line">                        a[j - h] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        h = h / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#####<font color="#BD00BD">  <strong>堆排序</strong>   </font></p>
<p><img src="/2019/11/25/eightsort2/eightsort2%5C%E5%A0%86%E6%8E%92%E5%BA%8F.gif" alt="堆排序"></p>
<p>待整理</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>八大排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>八大排序算法的基本思想与时间空间复杂度</title>
    <url>/2019/11/25/eightsort1/</url>
    <content><![CDATA[<h5 id="排序算法的思想"><a href="#排序算法的思想" class="headerlink" title="  排序算法的思想   "></a><font color=" #BD00BD ">  <strong>排序算法的思想</strong>   </font></h5><p>######(1)冒泡排序</p>
<p>是相邻元素之间的比较和交换，两重循环O(n2)；所以，如果两个相邻元素相等，是不会交换的。所以它是一种稳定的排序方法</p>
<p>######(2)选择排序</p>
<p>每个元素都与第一个元素相比，产生交换，两重循环O(n2)；举个栗子，5 8 5 2 9，第一遍之后，2会与5交换，那么原序列中两个5的顺序就被破坏了。所以不是稳定的排序算法</p>
<p>######(3)插入排序</p>
<p>插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。刚开始这个小序列只包含第一个元素，事件复杂度O(n2)。比较是从这个小序列的末尾开始的。想要插入的元素和小序列的最大者开始比起，如果比它大则直接插在其后面，否则一直往前找它该插入的位置。如果遇见了一个和插入元素相等的，则把插入元素放在这个相等元素的后面。所以相等元素间的顺序没有改变，是稳定的。</p>
<p>######(4)快速排序</p>
<p>快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j, 交换a[i]和a[j],重复上面的过程，直到i&gt;j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为 5 3 3 4 3 8 9 10 11， 现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j]交换的时刻。</p>
<p>######(5)归并排序</p>
<p>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</p>
<p>######(6)基数排序</p>
<p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。</p>
<p>######(7)希尔排序(shell)</p>
<p>希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</p>
<p>######(8)堆排序</p>
<p>我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n/2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</p>
<h5 id="稳定性"><a href="#稳定性" class="headerlink" title="  稳定性   "></a><font color=" #BD00BD ">  <strong>稳定性</strong>   </font></h5><p>归并排序、冒泡排序、插入排序、基数排序是稳定的</p>
<p>选择排序、快速排序、希尔排序、堆排序是不稳定的</p>
<h5 id="时间与空间复杂度"><a href="#时间与空间复杂度" class="headerlink" title="  时间与空间复杂度   "></a><font color="#BD00BD">  <strong>时间与空间复杂度</strong>   </font></h5><p><img src="/2019/11/25/eightsort1/eightsort1%5CImage.png" alt="Image"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>八大排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建教程（一）</title>
    <url>/2019/11/24/hexo1/</url>
    <content><![CDATA[<p>hexo的初级搭建还有部署到github page以及国内的coding上</p>
<h4 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a><font color="#FF00FF">Hexo简介</font></h4><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。<br>大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<h4 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a><font color="#FF00FF">Hexo搭建步骤</font></h4><ol>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>GitHub创建个人仓库</li>
<li>生成SSH添加到GitHub</li>
<li>将hexo部署到GitHub</li>
<li>发布文章</li>
</ol>
<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><font color="#FF00FF">安装Git</font></h4><h5 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a><strong>下载git</strong></h5><p>方式一(官网下载)：<a href="https://git-scm.com/download/win(到此页面后，稍微等一下会有下载弹框)" target="_blank" rel="noopener">https://git-scm.com/download/win(到此页面后，稍微等一下会有下载弹框)</a></p>
<p>方式二(csdn下载)：<a href="http://download.csdn.net/download/ainuser/9952103" target="_blank" rel="noopener">http://download.csdn.net/download/ainuser/9952103</a></p>
<h5 id="安装git-按照图上选择即可"><a href="#安装git-按照图上选择即可" class="headerlink" title="安装git(按照图上选择即可)"></a>安装git(按照图上选择即可)</h5><p><img src="/2019/11/24/hexo1/git1.png" alt><br><img src="/2019/11/24/hexo1/git2.png" alt><br><img src="/2019/11/24/hexo1/git3.png" alt><br><img src="/2019/11/24/hexo1/git4.png" alt><br><img src="/2019/11/24/hexo1/git5.png" alt><br><img src="/2019/11/24/hexo1/git6.png" alt><br><img src="/2019/11/24/hexo1/git7.png" alt><br><img src="/2019/11/24/hexo1/git8.png" alt><br>至此，安装git步骤结束。</p>
<h5 id="下载node-js"><a href="#下载node-js" class="headerlink" title="下载node.js"></a>下载node.js</h5><p>下载方式一：<a href="http://nodejs.org/download/" target="_blank" rel="noopener">http://nodejs.org/download/</a><br>下载方式二：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>下载方式三：<a href="http://download.csdn.net/download/ainuser/9952074" target="_blank" rel="noopener">http://download.csdn.net/download/ainuser/9952074</a></p>
<h5 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h5><p><img src="/2019/11/24/hexo1/nodeJs1.png" alt><br><img src="/2019/11/24/hexo1/nodeJs2.png" alt><br><img src="/2019/11/24/hexo1/nodeJs3.png" alt><br><img src="/2019/11/24/hexo1/nodeJs4.png" alt><br><img src="/2019/11/24/hexo1/nodeJs5.png" alt><br><img src="/2019/11/24/hexo1/nodeJs6.png" alt><br>至此，node.js安装步骤完毕。</p>
<h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><p>首先在本地磁盘中建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用)<br><img src="/2019/11/24/hexo1/hexo1.png" alt> </p>
<p>然后在文件夹中右击打开git命令框<br><img src="/2019/11/24/hexo1/hexo2.png" alt> </p>
<p>在git命令框中安装Hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/24/hexo1/hexo3.png" alt> </p>
<p>ps:如果npm命令未找到需要去环境变量中配置</p>
<p>初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/hexo1/hexo4.png" alt> </p>
<p><img src="/2019/11/24/hexo1/hexo4.png" alt> </p>
<p>ps:如果hexo命令未找到也需要去环境变量中配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">如果下载速度很慢可以配置npm镜像，我配置的镜像是</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm config <span class="built_in">set</span> registry http://registry.cnpmjs.org</span></span><br><span class="line">// 下载hexo比淘宝镜像快一些</span><br><span class="line">// 可以通过以下命令查看是否配置成功</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm congfig ls</span></span><br></pre></td></tr></table></figure>

<p>启动服务(hexo server –&gt;hexo clean –&gt;hexo generate –&gt;hexo deploy)   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 清理缓存文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line">// 生成静态文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line">// 启动服务</span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/hexo1/hexo5.png" alt><br><img src="/2019/11/24/hexo1/hexo6.png" alt> </p>
<p>浏览器输入<a href="http://localhost:4000,按理来说应该会出现本地访问页面" target="_blank" rel="noopener">http://localhost:4000,按理来说应该会出现本地访问页面</a></p>
]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
